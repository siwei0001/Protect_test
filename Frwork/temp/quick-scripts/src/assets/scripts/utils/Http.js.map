{"version":3,"sources":["assets/scripts/utils/Http.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\n/**\n *  http 基础请求类封装\n * \n * 示例：\n *\n * 更新：\n *  \n */\nimport Utils from \"./Utils\";\nimport BasePlatform from \"../platform/BasePlatform\";\n\nexport enum HttpReqType {\n    GET = 10001,\n    POST,\n    DELETE,\n};\n\nexport default class Http {\n\n    private m_data: Map<string, string> = new Map(); // 请求的参数数据\n    private m_ReqType: HttpReqType = HttpReqType.POST; // 请求类型， 默认为 POST ，可以手动设置成 GET 方式请求\n\n    /**\n     * 初始化\n     */\n    constructor() {\n        Utils.CCLog(\"Http constructor\");\n    }\n\n\n    /**\n     * 增加一个提交参数\n     * @param {string} _key \n     * @param {string} _value \n     */\n    AddParam(_key: string, _value: string) {\n        this.m_data.set(_key, _value);\n    }\n\n    /**\n     * 设置请求类型\n     * @param {HttpReqType} _value \n     */\n    SetReqType(_reqType: HttpReqType) {\n        this.m_ReqType = _reqType;\n    }\n\n    /**\n    * 发送一个请求\n    * @param {string} _url  设置请求响应的URL, 例如： http://xxxx/xxx.php\n    * \n    * @param {Function} _cbSuccess 请求成功回调函数，函数格式：success(data)\n    * @param {Function} _cbFail 请求失败回调函数 ,函数格式： fail(_info)\n    *      \n    * @param {number} _retry 超时重连次数(超时默认3次重连机制)\n    * @param {number} _timeout 超时时间,单位：毫秒 （超时重连机制，优化网络异常情况出现）\n    */\n    Request(_url: string, _cbSuccess: Function, _cbFail: Function, _retry: number = 3, _timeout: number = 1000) {\n\n        // 发送请求数据转换为字符串， 格式：pid=10003&appid=cycckhlb&appChannel=weixin\n        let postData = \"\";\n        this.m_data.forEach(function (value, key, mapObj) {\n            if (postData != \"\") {\n                postData += '&&';\n            }\n            postData += (key + '=' + value);\n        });\n\n        let xmlHttp = new XMLHttpRequest();         // 网络访问句柄  \n        xmlHttp.timeout = _timeout; // 超时时间，单位是毫秒\n\n        // 设置处理响应的回调函数\n        xmlHttp.onreadystatechange = function () {\n            if (xmlHttp.readyState == 4 && (xmlHttp.status >= 200 && xmlHttp.status < 400)) {\n                if (_cbSuccess) {\n                    _cbSuccess(JSON.parse(xmlHttp.responseText));  // 返回请求结果\n                    return;\n                }\n            }\n        };\n\n        xmlHttp.ontimeout = () => {\n            console.error('BaesHttp.Request Timeout!!');\n            _retry--;\n            if (_retry <= 0) {\n                if (_cbFail) {\n                    _cbFail(\"请求超时次数已达上限\");\n                }\n            }\n            else {\n                console.log(\"BaesHttp.Request fail\", this);\n                this.Request(_url, _cbSuccess, _cbFail, _retry, _timeout);\n            }\n        };\n\n        // console.log(\"BaesHttp.Request postData=\"+postData);\n        if (this.m_ReqType == HttpReqType.GET) {\n            xmlHttp.open(\"GET\", _url + \"?\" + postData, true);\n            xmlHttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            xmlHttp.send();\n        }\n        else if (this.m_ReqType == HttpReqType.DELETE) {\n            xmlHttp.open(\"DELETE\", _url, true);\n            xmlHttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            xmlHttp.send(postData);\n        }\n        else {\n            xmlHttp.open(\"POST\", _url, true);  // 设置以POST方式发送请求，并打开连接\n            xmlHttp.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            // xmlHttp.send(\"pid=10003&appid=cycckhlb&appChannel=weixin\");\n            xmlHttp.send(postData);\n        }\n    }\n\n}\n"]}