{"version":3,"sources":["assets/scripts/manage/DataManage.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import Utils from \"../utils/Utils\";\nimport Http, { HttpReqType } from \"../utils/Http\";\nimport { BaseConfig } from \"../config/BaseConfig\";\n\n// /**\n// * 网络配置文件列表\n// */\n// export var NetJson = {\n//     Game_Level_Config_Json: \"game_level_config.json\",\n//     Game_SignIn_Config_Json: \"game_signin_config.json\",\n//     Game_Item_Config_Json: \"game_item_config.json\",\n//     Game_Treasurechest_Config_Json: \"game_treasurechest_config.json\",\n// }\n\n/**\n* 本地配置文件列表\n*/\nexport var ResJson = {\n    Game_Level_Config_Json: \"game_level_config.json\",\n    Game_Map_Config_Json: \"game_map_config.json\",\n}\n\nexport default class DataManage {\n\n    private static _instance: DataManage;\n\n    private m_JsonData: Map<string, any> = new Map();\n\n    /**\n     * 构造函数\n     */\n    constructor() {\n    }\n\n    public static getInstance(): DataManage {\n        // 如果 instance 是一个实例 直接返回，  如果不是 实例化后返回\n        this._instance || (this._instance = new DataManage())\n        return this._instance\n    }\n\n    /**\n     * 加载远程json文件 多文件形式\n     * @param {Function} _callFun \n     * @param {string} _netUrl \n     * @param {...any} _jsonFile \n     */\n    LoadNetJson(_callFun: Function, _netUrl: string, ..._jsonFile) {\n        Utils.CCLog('LoadNetJson', _jsonFile);\n        let fileCount = _jsonFile.length;\n        let arrLoadSuccess = new Array();\n\n        for (let i = 0; i < fileCount; i++) {\n            let fileName = _jsonFile[i];\n            if (fileName != '') {\n\n                let objJson = this.m_JsonData.get(fileName);\n                if (objJson) {\n                    arrLoadSuccess.push(fileName);\n                    if (arrLoadSuccess.length == fileCount) {\n                        _callFun(\"success\", arrLoadSuccess.length);\n                    }\n                    else {\n                        _callFun(\"loading \" + fileName, arrLoadSuccess.length);\n                    }\n                    continue;\n                }\n\n                let http = new Http();\n                http.SetReqType(HttpReqType.GET);\n                http.Request(_netUrl + fileName, (data) => {\n                    Utils.CCLog('LoadNetJson succes', data);\n                    this.m_JsonData.set(fileName, data);\n                    arrLoadSuccess.push(fileName);\n                    if (arrLoadSuccess.length == fileCount) {\n                        _callFun(\"success\", arrLoadSuccess.length);\n                    }\n                    else {\n                        _callFun(\"loading \" + fileName, arrLoadSuccess.length);\n                    }\n                }, (err) => {\n                    Utils.CCLog('LoadNetJson err', err);\n                })\n            }\n        }\n    }\n\n    /**\n     * 加载远程json文件 数组形式\n     * @param {Function} _callFun \n     * @param {string} _netUrl \n     * @param {Array<string>} _jsonFile \n     */\n    LoadNetJsonArray(_callFun: Function, _netUrl: string, _jsonFileArray: Array<string>) {\n        Utils.CCLog('LoadNetJson', _jsonFileArray);\n        let fileCount = _jsonFileArray.length;\n        let arrLoadSuccess = new Array();\n\n        for (let i = 0; i < fileCount; i++) {\n            let fileName = _jsonFileArray[i];\n            if (fileName != '') {\n\n                let objJson = this.m_JsonData.get(fileName);\n                if (objJson) {\n                    arrLoadSuccess.push(fileName);\n                    if (arrLoadSuccess.length == fileCount) {\n                        _callFun(\"success\", arrLoadSuccess.length);\n                    }\n                    else {\n                        _callFun(\"loading \" + fileName, arrLoadSuccess.length);\n                    }\n                    continue;\n                }\n                let http = new Http();\n                http.SetReqType(HttpReqType.GET);\n                http.Request(_netUrl + fileName, (data) => {\n                    Utils.CCLog('LoadNetJsonArray succes', data);\n                    this.m_JsonData.set(fileName, data);\n                    arrLoadSuccess.push(fileName);\n                    if (arrLoadSuccess.length == fileCount) {\n                        _callFun(\"success\", arrLoadSuccess.length);\n                    }\n                    else {\n                        _callFun(\"loading \" + fileName, arrLoadSuccess.length);\n                    }\n                }, (err) => {\n                    Utils.CCLog('LoadNetJsonArray err', err);\n                })\n            }\n        }\n    }\n\n    /**\n     * 加载本地json文件 多文件形式\n     * @param {Function} _callFun \n     * @param {string} _pathUrl \n     * @param {...any} _jsonFile \n     */\n    LoadResJson(_callFun: Function, _pathUrl: string, ..._jsonFile) {\n        Utils.CCLog('LoadResJson', _jsonFile);\n        let fileCount = _jsonFile.length;\n        let arrLoadSuccess = new Array();\n\n        for (let i = 0; i < fileCount; i++) {\n            let fileName = _jsonFile[i];\n            if (fileName != '') {\n\n                let objJson = this.m_JsonData.get(fileName);\n                if (objJson) {\n                    arrLoadSuccess.push(fileName);\n                    if (arrLoadSuccess.length == fileCount) {\n                        _callFun(\"success\", arrLoadSuccess.length);\n                    }\n                    else {\n                        _callFun(\"loading \" + fileName, arrLoadSuccess.length);\n                    }\n                    continue;\n                }\n\n                cc.loader.loadRes(_pathUrl + fileName, cc.JsonAsset, (err, data) => {\n                    if (err) {\n                        Utils.CCLog('loadRes err', err);\n                        return;\n                    }\n                    Utils.CCLog(\"LoadResJson \", _pathUrl + fileName, \"data\", data);\n                    this.m_JsonData.set(fileName, data.json);\n                    arrLoadSuccess.push(fileName);\n                    if (arrLoadSuccess.length == fileCount) {\n                        _callFun(\"success\", arrLoadSuccess.length);\n                    }\n                    else {\n                        _callFun(\"loading \" + fileName, arrLoadSuccess.length);\n                    }\n                })\n            }\n        }\n    }\n\n    /**\n     * 返回对应json的数据\n     * @param {string} _keyName \n     */\n    GetJson(_keyName: string) {\n        return this.m_JsonData.get(_keyName);\n    }\n\n    /**\n     * 返回对应 id 某一行的数据\n     * @param {string} _keyName \n     * @param {any} _id \n     * \n     */\n    GetJsonVaule(_keyName: string, _id: any) {\n\n        let json = this.m_JsonData.get(_keyName);\n        for (let index = 0; index < json.length; index++) {\n            let data = json[index];\n            if (data.ID == _id) {\n                return data;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * 初始化json数据\n     * @param {Function} _callFun \n     */\n    InitJsonData(_callFun: Function) {\n        let url = BaseConfig.NetConfig.NetRoot + BaseConfig.NetConfig.NetRes;\n        //加载json\n        this.LoadNetJson((state, res) => {\n            //配置资源加载完成\n            if (state == \"success\") {\n                if (_callFun) {\n                    Utils.CCLog(\"this.m_JsonData\", this.m_JsonData);\n                    _callFun();\n                }\n            }\n        }, url + \"json/\",\n            ResJson.Game_Level_Config_Json,\n            ResJson.Game_Map_Config_Json\n        )\n    }\n\n}\n"]}