{"version":3,"sources":["assets/scripts/manage/NodePoolManage.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import Utils from \"../utils/Utils\";\n\nexport var PoolName = {\n    Obs: \"Obs\",\n    Car: \"Car\",\n    Map: \"map\"\n}\n\nvar NodePoolData = {\n    nodePool: null,\n    prefab: null,\n}\n\nexport default class NodePoolManage {\n\n    private static _instance: NodePoolManage;\n\n    private m_NodePool: Map<string, any> = new Map();\n\n    /**\n     * 构造函数\n     */\n    constructor() {\n\n    }\n\n    public static getInstance(): NodePoolManage {\n        // 如果 instance 是一个实例 直接返回，  如果不是 实例化后返回\n        this._instance || (this._instance = new NodePoolManage())\n        return this._instance\n    }\n\n    /**\n     * 创建对象池\n     * @param {string} _key 对象池名字\n     * @param {any} _prefab 预制体\n     * @param {number} _count 创建的数量\n     */\n    public CreateNoodePool(_key: string, _prefab: any, _count: number) {\n        Utils.CCLog(\"CreateNpcNoodePool\", _count)\n        if (_key == \"\" || _prefab == null || _count == 0) {\n            return;\n        }\n\n        //先判断是否有该对象池\n        let nodePoolData = this.m_NodePool.get(_key);\n        //如果不存在就新建一个对象池\n        if (!nodePoolData) {\n            nodePoolData = Utils.CloneObj(NodePoolData);\n            nodePoolData.nodePool = new cc.NodePool();\n            nodePoolData.prefab = _prefab;\n\n            this.m_NodePool.set(_key, nodePoolData)\n        }\n\n        for (let index = 0; index < _count; index++) {\n            let objnode = cc.instantiate(nodePoolData.prefab);\n            nodePoolData.nodePool.put(objnode);\n        }\n\n        Utils.CCLog(\"this.m_NodePool\", this.m_NodePool);\n    }\n\n    /**\n     * 获取一个node\n     * @param {string} _key 对象池名字\n     * @param {cc.Node} _parent\n     */\n    public GetNodeToNoodePool(_key: string, _parent: cc.Node = null): cc.Node {\n        let objNode = null;\n        //先判断是否有该对象池\n        let nodePoolData = this.m_NodePool.get(_key);\n        //如果不存在\n        if (!nodePoolData) {\n            Utils.CCLog(_key + \"__nodepool_not_create\");\n            return objNode;\n        }\n\n        // 通过 size 接口判断对象池中是否有空闲的对象\n        if (nodePoolData.nodePool.size()) {\n            objNode = nodePoolData.nodePool.get();\n        }\n        else {\n            //生成一个新的对象\n            objNode = cc.instantiate(nodePoolData.prefab);\n        }\n\n        objNode.parent = _parent; // 将生成的敌人加入节点树\n        return objNode;\n    }\n\n    /**\n     * 将单独的node归还对象池\n     * @param {string} _key 对象池名字\n     * @param {cc.Node} _npcNode \n     */\n    public PutNodeToNoodePool(_key: string, _node: cc.Node) {\n\n        //先判断是否有该对象池\n        let nodePoolData = this.m_NodePool.get(_key);\n        //如果不存在\n        if (!nodePoolData) {\n            Utils.CCLog(_key + \"__nodepool_not_create\");\n            return;\n        }\n        //将node放回节点\n        nodePoolData.nodePool.put(_node);\n        // Utils.CCLog(\"this.m_NodePool\", this.m_NodePool);\n    }\n\n    /**\n     * 清除对应的对象池\n     * @param {string} _key 对象池名字\n     */\n    public ClearNoodePool(_key: string) {\n\n        //先判断是否有该对象池\n        let nodePoolData = this.m_NodePool.get(_key);\n        //如果不存在\n        if (!nodePoolData) {\n            Utils.CCLog(_key + \"__nodepool_not_create\");\n            return;\n        }\n        //调用clear清除对象池\n        nodePoolData.nodePool.clear();\n        //将对象在map删除\n        this.m_NodePool.delete(_key);\n    }\n\n}"]}